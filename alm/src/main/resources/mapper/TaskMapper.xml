<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dili.alm.dao.TaskMapper">
	<resultMap id="BaseResultMap" type="com.dili.alm.domain.Task">
		<!-- WARNING - @mbg.generated -->
		<id column="id" jdbcType="BIGINT" property="id" />
		<result column="name" jdbcType="VARCHAR" property="name" />
		<result column="project_id" jdbcType="BIGINT" property="projectId" />
		<result column="version_id" jdbcType="BIGINT" property="versionId" />
		<result column="phase_id" jdbcType="BIGINT" property="phaseId" />
		<result column="start_date" jdbcType="TIMESTAMP" property="startDate" />
		<result column="end_date" jdbcType="TIMESTAMP" property="endDate" />
		<result column="before_task" jdbcType="BIGINT" property="beforeTask" />
		<result column="type" jdbcType="INTEGER" property="type" />
		<result column="owner" jdbcType="BIGINT" property="owner" />
		<result column="plan_time" jdbcType="SMALLINT" property="planTime" />
		<result column="flow" jdbcType="BIT" property="flow" />
		<result column="change_id" jdbcType="BIGINT" property="changeId" />
		<result column="describe" jdbcType="VARCHAR" property="describe" />
		<result column="status" jdbcType="TINYINT" property="status" />
		<result column="created" jdbcType="TIMESTAMP" property="created" />
		<result column="modified" jdbcType="TIMESTAMP" property="modified" />
		<result column="create_member_id" jdbcType="BIGINT" property="createMemberId" />
		<result column="modify_member_id" jdbcType="BIGINT" property="modifyMemberId" />
		<result column="fact_begin_date" jdbcType="TIMESTAMP" property="factBeginDate" />
		<result column="fact_end_date" jdbcType="TIMESTAMP" property="factEndDate" />
	</resultMap>

	<sql id="Base_Column_List">
		<!-- WARNING - @mbg.generated -->
		id, name, project_id, version_id, phase_id, start_date, end_date,
		before_task, type,
		owner, plan_time, flow, change_id, describe, status,
		created, modified,
		create_member_id,
		modify_member_id,fact_begin_date,fact_end_date
	</sql>

	<sql id="Join_Column_List">
		t.id,
		t.name,
		t.project_id,
		t.version_id,
		t.phase_id,
		t.start_date,
		t.end_date,
		t.before_task,
		t.type,
		t.owner,
		t.plan_time,
		t.flow,
		t.change_id,
		t.describe,
		t.status,
		t.created,
		t.modified,
		t.create_member_id,
		t.modify_member_id,
		t.fact_begin_date,
		t.fact_end_date
	</sql>

	<select id="selectBy" parameterType="java.lang.Long" resultMap="BaseResultMap">
		<!-- WARNING - @mbg.generated -->
		select
		<include refid="Base_Column_List" />
		from task
		where id = #{id,jdbcType=BIGINT}
	</select>
	<update id="updateBy" parameterType="com.dili.alm.domain.Task">
		<!-- WARNING - @mbg.generated -->
		update task
		<set>
			<if test="name != null">
				name = #{name,jdbcType=VARCHAR},
			</if>
			<if test="projectId != null">
				project_id = #{projectId,jdbcType=BIGINT},
			</if>
			<if test="versionId != null">
				version_id = #{versionId,jdbcType=BIGINT},
			</if>
			<if test="phaseId != null">
				phase_id = #{phaseId,jdbcType=BIGINT},
			</if>
			<if test="startDate != null">
				start_date = #{startDate,jdbcType=TIMESTAMP},
			</if>
			<if test="endDate != null">
				end_date = #{endDate,jdbcType=TIMESTAMP},
			</if>
			<if test="beforeTask != null">
				before_task = #{beforeTask,jdbcType=BIGINT},
			</if>
			<if test="type != null">
				type = #{type,jdbcType=INTEGER},
			</if>
			<if test="owner != null">
				owner = #{owner,jdbcType=BIGINT},
			</if>
			<if test="planTime != null">
				plan_time = #{planTime,jdbcType=SMALLINT},
			</if>
			<if test="flow != null">
				flow = #{flow,jdbcType=BIT},
			</if>
			<if test="changeId != null">
				change_id = #{changeId,jdbcType=BIGINT},
			</if>
			<if test="describe != null">
				describe = #{describe,jdbcType=VARCHAR},
			</if>
			<if test="status != null">
				status = #{status,jdbcType=TINYINT},
			</if>
			<if test="created != null">
				created = #{created,jdbcType=TIMESTAMP},
			</if>
			<if test="modified != null">
				modified = #{modified,jdbcType=TIMESTAMP},
			</if>
			<if test="createMemberId != null">
				create_member_id = #{createMemberId,jdbcType=BIGINT},
			</if>
			<if test="modifyMemberId != null">
				modify_member_id = #{modifyMemberId,jdbcType=BIGINT},
			</if>
			<if test="factBeginDate != null">
				start_date = #{factBeginDate,jdbcType=TIMESTAMP},
			</if>
			<if test="factEndDate != null">
				end_date = #{factEndDate,jdbcType=TIMESTAMP},
			</if>
		</set>
		where id = #{id,jdbcType=BIGINT}
	</update>

	<select id="selectByProjectState" parameterType="Integer"
		resultMap="BaseResultMap">
		SELECT
		<include refid="Join_Column_List" />
		FROM
		task t
		INNER JOIN project_phase pp ON t.phase_id = pp.id
		INNER JOIN
		project p ON pp.project_id = p.id
		WHERE p.project_state = 1
	</select>

	<select id="countNotCompletedByPhaseId" parameterType="java.util.Map"
		resultType="Integer">
		select count(*) from task where (status = #{startStatus} or
		status =
		#{notCompletedStatus}) and phase_id = #{phaseId}
	</select>
	<!--  根据群组查询信息 -->
    <select  id="selectByTeam"  resultType="com.dili.alm.domain.Task" >
     select * from alm.task as task where task.project_id in 
            (select t2.project_id from alm.team as t2 where t2.project_id in(select t.project_id from alm.team as t where t.member_id =#{selectOwner,jdbcType=BIGINT}))
           
          
		     <if test="task.name != null">
				and task.name like CONCAT("%",#{task.name,jdbcType=VARCHAR},"%") 
			</if>
			<if test="task.projectId != null and task.projectId != 0">
				and task.project_id = #{task.projectId,jdbcType=BIGINT}
			</if>
			<if test="task.versionId != null and task.versionId != 0">
				and task.version_id = #{task.versionId,jdbcType=BIGINT}
			</if>
			<if test="ids != null">
				and task.phase_id in 
				<foreach item="item" index="index" collection="ids" open="(" separator="," close=")">  
				  #{item}  
				</foreach>
			</if>
			<if test="task.owner != null and task.owner != 0">
				and task.owner = #{task.owner,jdbcType=BIGINT}
			</if>
			<if test="task.startDate != null">
				and task.start_date = #{task.startDate,jdbcType=TIMESTAMP}
			</if>
			<if test="task.endDate != null">
				and task.end_date = #{task.endDate,jdbcType=TIMESTAMP}
			</if>
			<if test="task.beforeTask != null">
				and task.before_task = #{task.beforeTask,jdbcType=BIGINT}
			</if>
			<if test="task.type != null">
				and task.type = #{task.type,jdbcType=INTEGER}
			</if>
			<if test="task.planTime != null">
				and task.plan_time = #{task.planTime,jdbcType=SMALLINT}
			</if>
			<if test="task.flow != null">
				and task.flow = #{task.flow,jdbcType=BIT}
			</if>
			<if test="task.changeId != null">
				and task.change_id = #{task.changeId,jdbcType=BIGINT}
			</if>
			<if test="task.describe != null">
				and task.describe = #{task.describe,jdbcType=VARCHAR}
			</if>
			<if test="task.status != null">
				and task.status = #{task.status,jdbcType=TINYINT}
			</if>
			<if test="task.created != null">
				and task.created = #{task.created,jdbcType=TIMESTAMP}
			</if>
			<if test="task.modified != null">
				and task.modified = #{task.modified,jdbcType=TIMESTAMP}
			</if>
			<if test="task.createMemberId != null">
				and task.create_member_id = #{task.createMemberId,jdbcType=BIGINT}
			</if>
			<if test="task.modifyMemberId != null">
				and task.modify_member_id = #{task.modifyMemberId,jdbcType=BIGINT}
			</if>
			<if test="task.factBeginDate != null">
				and task.start_date = #{task.factBeginDate,jdbcType=TIMESTAMP}
			</if>
			<if test="task.factEndDate != null">
				and task.end_date = #{task.factEndDate,jdbcType=TIMESTAMP}
			</if>
			ORDER BY task.created DESC
 			<if test="task.page != null and task.rows != null">
            limit ${(task.page-1)*task.rows},${task.rows}
            </if> 
    </select>
     <select  id="selectByTeamCount"  resultType="int" >
     select count(1) from alm.task as task where task.project_id in 
            (select t2.project_id from alm.team as t2 where t2.project_id in(select t.project_id from alm.team as t where t.member_id =#{selectOwner,jdbcType=BIGINT}))
           
          
		     <if test="task.name != null">
				and task.name like CONCAT("%",#{task.name,jdbcType=VARCHAR},"%") 
			</if>
			<if test="task.projectId != null and task.projectId != 0">
				and task.project_id = #{task.projectId,jdbcType=BIGINT}
			</if>
			<if test="task.versionId != null and task.versionId != 0">
				and task.version_id = #{task.versionId,jdbcType=BIGINT}
			</if>
			<if test="ids != null">
				and task.phase_id in
				<foreach item="item" index="index" collection="ids" open="(" separator="," close=")">  
				  #{item}  
				</foreach> 
			</if>
			<if test="task.owner != null and task.owner != 0">
				and task.owner = #{task.owner,jdbcType=BIGINT}
			</if>
			<if test="task.startDate != null">
				and task.start_date = #{task.startDate,jdbcType=TIMESTAMP}
			</if>
			<if test="task.endDate != null">
				and task.end_date = #{task.endDate,jdbcType=TIMESTAMP}
			</if>
			<if test="task.beforeTask != null">
				and task.before_task = #{task.beforeTask,jdbcType=BIGINT}
			</if>
			<if test="task.type != null">
				and task.type = #{task.type,jdbcType=INTEGER}
			</if>
			<if test="task.planTime != null">
				and task.plan_time = #{task.planTime,jdbcType=SMALLINT}
			</if>
			<if test="task.flow != null">
				and task.flow = #{task.flow,jdbcType=BIT}
			</if>
			<if test="task.changeId != null">
				and task.change_id = #{task.changeId,jdbcType=BIGINT}
			</if>
			<if test="task.describe != null">
				and task.describe = #{task.describe,jdbcType=VARCHAR}
			</if>
			<if test="task.status != null">
				and task.status = #{task.status,jdbcType=TINYINT}
			</if>
			<if test="task.created != null">
				and task.created = #{task.created,jdbcType=TIMESTAMP}
			</if>
			<if test="task.modified != null">
				and task.modified = #{task.modified,jdbcType=TIMESTAMP}
			</if>
			<if test="task.createMemberId != null">
				and task.create_member_id = #{task.createMemberId,jdbcType=BIGINT}
			</if>
			<if test="task.modifyMemberId != null">
				and task.modify_member_id = #{task.modifyMemberId,jdbcType=BIGINT}
			</if>
			<if test="task.factBeginDate != null">
				and task.start_date = #{task.factBeginDate,jdbcType=TIMESTAMP}
			</if>
			<if test="task.factEndDate != null">
				and task.end_date = #{task.factEndDate,jdbcType=TIMESTAMP}
			</if>
			
    </select>
    <select  id="selectProjectChangeByTeam"  resultType="com.dili.alm.domain.ProjectChange" >
     select * from project_change as pc where pc.project_id in (select p.id  from project as p where p.id in
		     (select t.project_id from team as t where t.member_id =#{selectOwner,jdbcType=BIGINT})) and pc.status = 3
		   <if test="projectId != null">
				and pc.project_id = #{projectId,jdbcType=BIGINT}
			</if>
    </select>
    
     <select  id="selectProjectByTeam"  resultType="com.dili.alm.domain.Project" >
     select *  from project as p where p.id in
		     (select t.project_id from team as t where t.member_id =#{selectOwner,jdbcType=BIGINT}) and p.project_state &lt;&gt;2 and p.project_state &lt;&gt; 4 ORDER BY p.created DESC
    </select>
   <select  id="selectUserByTeam"  resultType="java.lang.Long" >
   
    select distinct(t2.member_id) from alm.team as t2 where t2.project_id in
     
       (select t.project_id from alm.team as t where t.member_id =#{selectOwner,jdbcType=BIGINT})
       
        ORDER BY t2.join_time DESC
   </select>
   <select  id="selectVersionByTeam"  resultType="com.dili.alm.domain.ProjectVersion" >
     select * from alm.project_version as version where version.project_id in 
      (select distinct(t2.project_id) from alm.team as t2 where t2.project_id in
        (select t.project_id from alm.team as t where t.member_id =#{selectOwner,jdbcType=BIGINT})) ORDER BY version.created DESC
   </select>
   
   
    <select  id="selectOtherTaskDetail"  resultType="com.dili.alm.domain.TaskDetails" >
    select * from alm.task_details  as td where  td.task_id in 
    (select tt.id from task as tt where tt.owner = #{selectOwner,jdbcType=BIGINT}) and td.created like CONCAT("%",#{selectDate,jdbcType=VARCHAR},"%") 
   </select>
   

   <!-- 数据统计相关 begin -->
   <!-- 人员工时查询 -->
   <select id="selectTaskHourByUser" resultType="com.dili.alm.domain.TaskByUsersDto">
	select ut.id as userNo,ut.real_name as userName,ut.departmentId as departmentId,ut.departmentName as departmentName,(SUM(taskInfo.taskHour)+SUM(taskInfo.overHour)) as totalHour,SUM(taskInfo.taskHour) as  taskHour,SUM(taskInfo.overHour)  as overHour FROM 
	(select  tt.id as detailId,tt.task_hour as taskHour,tt.over_hour as overHour,t.`owner` as ownerId,t.id as taskId  from alm.task_details as tt LEFT JOIN  alm.task as t ON  tt.task_id = t.id
	where tt.modified BETWEEN  #{beginTime,jdbcType=TIMESTAMP}  AND  #{task.endTime,jdbcType=TIMESTAMP} ) as taskInfo LEFT JOIN 
	(select utt.id as id,utt.real_name as real_name,dt.`name` as departmentName,utt.department_id as departmentId  from alm.`user` as utt LEFT JOIN alm.department as dt on utt.department_id = dt.id) as ut 
	ON taskInfo.ownerId = ut.id where 1=1   
	<if test="departmentId != null">
		and ut.departmentId = #{departmentId,jdbcType=BIGINT} 
	</if>
	<if test="task.name != null">
		and ut.id = #{uId,jdbcType=BIGINT} 
	</if>
	GROUP BY ut.id ;
   </select>
    <!-- 项目以及时间-->
    <select id="selectProjectHours" resultType="com.dili.alm.domain.TaskHoursByProjectDto">
	select p.id as projectId,p.`name` as projectName,ifnull(t2.totalHour,0) as sumHour  FROM (select* from project where actual_start_date BETWEEN #{beginTime,jdbcType=TIMESTAMP} AND #{endTime,jdbcType=TIMESTAMP} or actual_end_date BETWEEN #{beginTime,jdbcType=TIMESTAMP} AND #{endTime,jdbcType=TIMESTAMP})as p LEFT JOIN 
	(select t1.project_id as pid ,SUM(td1.taskHours+td1.overHours) as totalHour from task as t1 LEFT JOIN 
	(SELECT task_id as tid,task_hour as taskHours,over_hour as overHours FROM task_details ) as td1 on t1.id = td1.tid GROUP BY t1.project_id) as t2 ON  p.id = t2.pid  
   </select>
   <!-- 年度总汇-->
    <select id="selectProjectYearsCover" resultType="com.dili.alm.domain.ProjectYearCoverDto">
		select pp.pid as projectId,pp.pname as projectName,pp.ptype as projectType,pp.pstate as projectstate,t.task_count as taskCount,t.finishCount as finishCount,t.ongoing as ongoing,t.completion_rate as completionRate,t.noFinish as noFinish,t.overdue_rate as overdueRate from 
		(select ps.pid as pid ,ps.pname as pname,dd2.`code` as ptype ,ps.pstate from 
		(select p.id as pid,p.`name` as pname ,p.type as ptype ,p.actual_start_date as pstart,p.actual_end_date as pend,dd.`code` as pstate from alm.project as p LEFT JOIN alm.data_dictionary_value  dd ON p.project_state=dd.`value` where dd.dd_id=6)
		as ps LEFT JOIN alm.data_dictionary_value as dd2 ON  ps.ptype = dd2.`value` where dd2.dd_id= 3  AND ps.pstart BETWEEN #{beginTime,jdbcType=TIMESTAMP} AND #{endTime,jdbcType=TIMESTAMP} or ps.pend BETWEEN #{beginTime,jdbcType=TIMESTAMP} AND #{endTime,jdbcType=TIMESTAMP}) as pp 
		LEFT JOIN (
		select  tt1.tpid as tpid,tt1.ttcount as task_count,tt2.finishCount as finishCount,tt2.dottcount as ongoing,tt2.dottcount/tt1.ttcount as completion_rate,tt1.noFinish as noFinish,tt1.noFinish/tt1.ttcount as overdue_rate FROM
		(select t1.tpid as tpid ,t1.ttcount as ttcount,t2.nfcount as noFinish from
		(select project_id as tpid,count(*) as ttcount from alm.task GROUP BY project_id)as t1 LEFT JOIN (select project_id as tpid,count(*) as nfcount from alm.task  where `status` =  4 GROUP BY project_id ) as t2 on 
		t1.tpid=t2.tpid) as tt1  
		LEFT JOIN 
		(select t1.tpid as tpid ,t1.do_count as dottcount,t2.finishCount as finishCount from
		(select project_id as tpid,count(*) as do_count from alm.task  where `status` =  1 GROUP BY project_id)as t1 LEFT JOIN (select project_id as tpid,count(*) as finishCount from alm.task  where `status` =  4 GROUP BY project_id ) as t2 on 
		t1.tpid=t2.tpid )as tt2
		ON tt1.tpid=tt2.tpid
		) as t on pp.pid =t.tpid
   </select>
   <!-- 数据统计相关 end  -->

   
   <select  id="selectTaskStateCount"  resultType="com.dili.alm.domain.dto.TaskStateCountDto" >
    select d.`code` as taskState,count(*) as stateCount from alm.task as t LEFT JOIN alm.data_dictionary_value as d ON t.`status` = d.`value`  where d.dd_id =16 and t.project_id in 
  	<foreach item="item" index="index" collection="list" open="(" separator="," close=")">  
  		#{item}  
 	</foreach> 
 	GROUP BY t.`status`
 	</select>

</mapper>
