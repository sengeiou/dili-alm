<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dili.alm.dao.ProjectMapper">
	<resultMap id="BaseResultMap"
		type="com.dili.alm.domain.Project">
		<!-- WARNING - @mbg.generated -->
		<id column="id" jdbcType="BIGINT" property="id" />
		<result column="apply_id" jdbcType="BIGINT" property="applyId" />
		<result column="serial_number" jdbcType="VARCHAR"
			property="serialNumber" />
		<result column="parent_id" jdbcType="BIGINT"
			property="parentId" />
		<result column="name" jdbcType="VARCHAR" property="name" />
		<result column="type" jdbcType="VARCHAR" property="type" />
		<result column="project_manager" jdbcType="BIGINT"
			property="projectManager" />
		<result column="develop_manager" jdbcType="BIGINT"
			property="developManager" />
		<result column="test_manager" jdbcType="BIGINT"
			property="testManager" />
		<result column="product_manager" jdbcType="BIGINT"
			property="productManager" />
		<result column="created" jdbcType="TIMESTAMP"
			property="created" />
		<result column="modified" jdbcType="TIMESTAMP"
			property="modified" />
		<result column="start_date" jdbcType="DATE"
			property="startDate" />
		<result column="end_date" jdbcType="DATE" property="endDate" />
		<result column="actual_start_date" jdbcType="TIMESTAMP"
			property="actualStartDate" />
		<result column="actual_end_date" jdbcType="TIMESTAMP"
			property="actualEndDate" />
		<result column="project_state" jdbcType="INTEGER"
			property="projectState" />
		<result column="task_count" jdbcType="INTEGER"
			property="taskCount" />
		<result column="member_count" jdbcType="INTEGER"
			property="memberCount" />
		<result column="completed_progress" jdbcType="INTEGER"
			property="completedProgress" />
		<result column="originator" jdbcType="BIGINT"
			property="originator" />
		<result column="dep" jdbcType="BIGINT" property="dep" />
		<result column="business_owner" jdbcType="BIGINT"
			property="businessOwner" />
		<result column="estimate_launch_date" jdbcType="TIMESTAMP"
			property="estimateLaunchDate" />
		<result column="close_time" jdbcType="TIMESTAMP"
			property="closeTime" />
	</resultMap>

	<resultMap
		type="com.dili.alm.domain.dto.ProjectCostStatisticDto"
		id="projectCostStatisticRM">
		<id column="project_id" property="projectId" />
		<result column="project_name" property="projectName" />
		<result column="plan_human_cost" property="planHumanCost" />
		<result column="plan_software_cost" property="planSoftwareCost" />
		<result column="plan_hardware_cost" property="planHardwareCost" />
		<result column="plan_travel_cost" property="planTravelCost" />
		<result column="plan_other_cost" property="planOtherCost" />
		<result column="plan_total_cost" property="planTotalCost" />
		<result column="actual_human_cost" property="actualHumanCost" />
		<result column="actual_software_cost"
			property="actualSoftwareCost" />
		<result column="actual_hardware_cost"
			property="actualHardwareCost" />
		<result column="actual_travel_cost" property="actualTravelCost" />
		<result column="actual_other_cost" property="actualOtherCost" />
		<result column="actual_total_cost" property="actualTotalCost" />
	</resultMap>

	<sql id="Base_Column_List">
		<!-- WARNING - @mbg.generated -->
		id, apply_id, serial_number, parent_id, name, type, project_manager,
		develop_manager,
		test_manager, product_manager, created, modified,
		start_date, end_date,
		actual_start_date,
		actual_end_date, project_state,
		task_count, member_count, completed_progress,
		originator,
		dep,
		business_owner, estimate_launch_date, close_time
	</sql>
	<select id="selectBy" parameterType="java.lang.Long"
		resultMap="BaseResultMap">
		<!-- WARNING - @mbg.generated -->
		select
		<include refid="Base_Column_List" />
		from project
		where id = #{id,jdbcType=BIGINT}
	</select>
	<update id="updateBy"
		parameterType="com.dili.alm.domain.Project">
		<!-- WARNING - @mbg.generated -->
		update project
		<set>
			<if test="applyId != null">
				apply_id = #{applyId,jdbcType=BIGINT},
			</if>
			<if test="serialNumber != null">
				serial_number = #{serialNumber,jdbcType=VARCHAR},
			</if>
			<if test="parentId != null">
				parent_id = #{parentId,jdbcType=BIGINT},
			</if>
			<if test="name != null">
				name = #{name,jdbcType=VARCHAR},
			</if>
			<if test="type != null">
				type = #{type,jdbcType=VARCHAR},
			</if>
			<if test="projectManager != null">
				project_manager = #{projectManager,jdbcType=BIGINT},
			</if>
			<if test="developManager != null">
				develop_manager = #{developManager,jdbcType=BIGINT},
			</if>
			<if test="testManager != null">
				test_manager = #{testManager,jdbcType=BIGINT},
			</if>
			<if test="productManager != null">
				product_manager = #{productManager,jdbcType=BIGINT},
			</if>
			<if test="created != null">
				created = #{created,jdbcType=TIMESTAMP},
			</if>
			<if test="modified != null">
				modified = #{modified,jdbcType=TIMESTAMP},
			</if>
			<if test="startDate != null">
				start_date = #{startDate,jdbcType=DATE},
			</if>
			<if test="endDate != null">
				end_date = #{endDate,jdbcType=DATE},
			</if>
			<if test="actualStartDate != null">
				actual_start_date =
				#{actualStartDate,jdbcType=TIMESTAMP},
			</if>
			<if test="actualEndDate != null">
				actual_end_date = #{actualEndDate,jdbcType=TIMESTAMP},
			</if>
			<if test="projectState != null">
				project_state = #{projectState,jdbcType=INTEGER},
			</if>
			<if test="taskCount != null">
				task_count = #{taskCount,jdbcType=INTEGER},
			</if>
			<if test="memberCount != null">
				member_count = #{memberCount,jdbcType=INTEGER},
			</if>
			<if test="completedProgress != null">
				completed_progress =
				#{completedProgress,jdbcType=INTEGER},
			</if>
			<if test="originator != null">
				originator = #{originator,jdbcType=BIGINT},
			</if>
			<if test="dep != null">
				dep = #{dep,jdbcType=BIGINT},
			</if>
			<if test="businessOwner != null">
				business_owner = #{businessOwner,jdbcType=BIGINT},
			</if>
			<if test="estimateLaunchDate != null">
				estimate_launch_date =
				#{estimateLaunchDate,jdbcType=TIMESTAMP},
			</if>
			<if test="closeTime != null">
				close_time = #{closeTime,jdbcType=TIMESTAMP},
			</if>
		</set>
		where id = #{id,jdbcType=BIGINT}
	</update>

	<select id="getChildProjects" parameterType="java.lang.Long"
		resultMap="BaseResultMap">
		{call getChildProjects(#{id})}
	</select>

	<select id="getProjectsByTeam" resultMap="BaseResultMap">
		SELECT
		DISTINCT p.id, p.serial_number, p.parent_id, p.name, p.type,
		p.project_manager,
		p.develop_manager, p.test_manager,
		p.product_manager, p.created, p.modified, p.start_date, p.end_date,
		p.actual_start_date,
		p.actual_end_date,p.project_state,
		p.task_count,p.member_count, p.completed_progress, p.originator,p.dep,
		p.business_owner,p.estimate_launch_date
		FROM
		`project` p
		LEFT JOIN
		`team`
		t
		ON p.id = t.`project_id`
		WHERE t.member_id = #{owner}
		ORDER BY
		p.actual_start_date desc
		<if test="project.page != null and project.rows != null ">
			limit ${(project.page-1)*project.rows},${project.rows}
		</if>

	</select>
	<select id="getPageByProjectCount" resultType="int">
		SELECT COUNT(1) AS
		'total'
		FROM
		(SELECT
		DISTINCT p.id
		FROM
		`project` p
		RIGHT JOIN
		`team` t
		ON
		p.id = t.`project_id`
		WHERE t.member_id = #{owner} ) AS c

	</select>

	<select id="getTpyeByProjectCount"
		resultType="com.dili.alm.domain.dto.ProjectStatusCountDto">
		SELECT p.TYPE AS projectType ,p.project_state AS
		projectState,COUNT(*)
		AS stateCount
		FROM (
		SELECT
		id,
		apply_id,
		serial_number,
		parent_id,
		`name`,
		type,
		project_manager,
		develop_manager,
		test_manager,
		product_manager,
		created,
		modified,
		start_date,
		end_date,
		actual_start_date,
		actual_end_date,
		project_state,
		task_count,
		member_count,
		completed_progress,
		originator,
		dep,
		business_owner,
		estimate_launch_date,
		IFNULL( close_time, #{currentTime} ) AS
		close_time
		FROM
		`project`
		) p
		WHERE
		p.type=#{type,jdbcType=VARCHAR}
		AND
		(
		(
		p.created <![CDATA[>=]]>
		#{startTime} AND p.created <![CDATA[<=]]>
		#{endTime} )
		OR (
		p.project_state = 4
		AND p.close_time <![CDATA[>=]]>
		#{startTime}
		AND p.close_time <![CDATA[<=]]>
		#{endTime}
		)
		OR (
		p.project_state != 4
		<if test="currentTime.time &lt;= endTime.time">
			AND p.close_time <![CDATA[>=]]>
			#{endTime}
		</if>
		<if test="currentTime.time &gt; endTime.time">
			AND p.close_time <![CDATA[<=]]>
			#{endTime}
		</if>
		)
		)
		GROUP BY
		p.project_state
	</select>

	<select id="getProjectIds" resultType="java.lang.Long">
		SELECT id
		FROM (
		SELECT
		id,
		apply_id,
		serial_number,
		parent_id,
		`name`,
		type,
		project_manager,
		develop_manager,
		test_manager,
		product_manager,
		created,
		modified,
		start_date,
		end_date,
		actual_start_date,
		actual_end_date,
		project_state,
		task_count,
		member_count,
		completed_progress,
		originator,
		dep,
		business_owner,
		estimate_launch_date,
		IFNULL( close_time,
		#{currentTime})
		AS close_time
		FROM
		`project`
		) p
		WHERE
		(
		p.created <![CDATA[>=]]>
		#{startTime} AND p.created <![CDATA[<=]]>
		#{endTime} )
		OR (
		p.project_state = 4
		AND p.close_time <![CDATA[>=]]>
		#{startTime}
		AND p.close_time <![CDATA[<=]]>
		#{endTime}
		)
		OR (
		p.project_state != 4
		<if test="currentTime.time &lt;= endTime.time">
			AND p.close_time <![CDATA[>=]]>
			#{endTime}
		</if>
		<if test="currentTime.time &gt; endTime.time">
			AND p.close_time <![CDATA[<=]]>
			#{endTime}
		</if>
		)
	</select>


	<select id="getProjectProgressList"
		resultType="com.dili.alm.domain.dto.ProjectProgressDto">
		SELECT
		p.id as id,
		p.name as name,
		p.type as type,
		p.project_manager as
		projectManager,
		p.project_state as projectState,
		p.completed_progress as
		completedProgress,
		pa.estimate_launch_date as estimateLaunchDate,
		pa.`start_date` as startDate,
		pa.`end_date` as endDate
		FROM `project` p
		LEFT JOIN
		`project_apply` pa
		ON p.apply_id=pa.id
		WHERE 1=1
		<if test="list != null and list.size != 0">
			AND p.project_state IN
			<foreach close=")" collection="list" index="index"
				item="item" open="(" separator=",">
				#{item}
			</foreach>
		</if>
		<if test="project.page != null and project.rows != null">
			limit ${(project.page-1)*project.rows},${project.rows}
		</if>
	</select>
	<select id="getProjectProgressListCount" resultType="int">
		SELECT
		count(*)
		FROM `project` p
		LEFT JOIN
		`project_apply` pa
		ON
		p.apply_id=pa.id
		WHERE 1=1
		<if test="list != null and list.size&gt;0">
			AND p.project_state IN
			<foreach close=")" collection="list" index="index"
				item="item" open="(" separator=",">
				#{item}
			</foreach>
		</if>

	</select>


	<select id="getProjectTypeAllCount" resultType="int">
		SELECT COUNT(*)
		FROM (
		SELECT
		id,
		apply_id,
		serial_number,
		parent_id,
		`name`,
		type,
		project_manager,
		develop_manager,
		test_manager,
		product_manager,
		created,
		modified,
		start_date,
		end_date,
		actual_start_date,
		actual_end_date,
		project_state,
		task_count,
		member_count,
		completed_progress,
		originator,
		dep,
		business_owner,
		estimate_launch_date,
		IFNULL( close_time, #{currentTime} ) AS
		close_time
		FROM
		`project`
		) p
		WHERE
		(
		p.created <![CDATA[>=]]>
		#{startTime} AND p.created <![CDATA[<=]]>
		#{endTime} )
		OR (
		p.project_state = 4
		AND p.close_time <![CDATA[>=]]>
		#{startTime}
		AND p.close_time <![CDATA[<=]]>
		#{endTime}
		)
		OR (
		p.project_state != 4
		<if test="currentTime.time &lt;= endTime.time">
			AND p.close_time <![CDATA[>=]]>
			#{endTime}
		</if>
		<if test="currentTime.time &gt; endTime.time">
			AND p.close_time <![CDATA[<=]]>
			#{endTime}
		</if>
		)
	</select>

	<select id="getStateByProjectCount"
		resultType="com.dili.alm.domain.dto.ProjectStatusCountDto">
		SELECT s.projectState AS projectState,COUNT(*) as stateCount
		FROM
		(SELECT DISTINCT p.id,p.project_state AS projectState
		FROM `project` p
		LEFT JOIN
		`team` t
		ON p.id = t.`project_id`
		WHERE 1=1
		<if test="list != null and list.size&gt;0">
			AND p.id IN
			<foreach close=")" collection="list" index="index"
				item="item" open="(" separator=",">
				#{item}
			</foreach>
		</if>
		<if test="owner != null">
			AND t.member_id = #{owner}
		</if>
		) s
		GROUP BY s.projectState


	</select>
	<select id="selectNotSubmitWeekly" resultType="java.lang.Long">
		SELECT
		id
		FROM
		`project`
		WHERE
		project_state=1
		OR
		( #{startTime}&lt;=end_date AND
		end_date&lt;=#{endTime}
		AND
		project_state = 2
		)
	</select>

	<select id="projectCostStatistic"
		resultMap="projectCostStatisticRM">
		SELECT
		p.id AS project_id,
		p.`name` AS project_name,
		max( CASE
		t1.cost_type WHEN 1 THEN total ELSE '/' END ) AS
		plan_human_cost,
		max(
		CASE t1.cost_type WHEN 2 THEN total ELSE '/' END ) AS
		plan_software_cost,
		(
		max( CASE t1.cost_type WHEN 3 THEN total ELSE 0
		END ) + max( CASE
		t1.cost_type WHEN 4 THEN total ELSE 0 END )
		) AS
		plan_hardware_cost,
		max( CASE t1.cost_type WHEN 5 THEN total ELSE '/'
		END ) AS
		plan_travel_cost,
		max( CASE t1.cost_type WHEN 6 THEN total ELSE
		'/' END ) AS
		plan_other_cost,
		IFNULL( sum( t1.total ), '/' ) AS
		plan_total_cost,
		IFNULL( t2.human_cost, '/' ) AS actual_human_cost,
		IFNULL( t3.software_cost, '/' ) AS actual_software_cost,
		IFNULL(
		hr.total_cost, '/' ) AS actual_hardware_cost,
		IFNULL( round(
		tca.total_amount / 100, 2 ), '/' ) AS actual_travel_cost,
		IFNULL(
		t3.other_cost, '/' ) AS actual_other_cost,
		(
		( IFNULL( t2.human_cost, 0
		) ) + IFNULL( hr.total_cost, 0 ) + ( IFNULL(
		round( tca.total_amount /
		100, 2 ), 0 ) )
		) AS actual_total_cost
		FROM
		project p
		LEFT JOIN (
		SELECT
		pc.apply_id,
		pc.cost_type,
		sum( pc.total ) AS total
		FROM
		project_cost pc
		INNER JOIN project p ON p.apply_id = pc.apply_id
		GROUP BY
		pc.apply_id,
		pc.cost_type
		) t1 ON p.apply_id = t1.apply_id
		LEFT JOIN (
		SELECT
		t.project_id,
		round( sum( td.task_hour / 8 * 1000 ), 0 ) AS human_cost
		FROM
		task t
		INNER JOIN task_details td ON t.id = td.task_id
		GROUP BY
		t.project_id
		) t2 ON p.id = t2.project_id
		LEFT JOIN ( SELECT sum( cost )
		AS total_cost, project_id FROM
		hardware_resource GROUP BY project_id )
		hr ON hr.project_id = p.id
		LEFT JOIN ( SELECT sum( total_amount ) AS
		total_amount, project_id
		FROM travel_cost_apply GROUP BY project_id )
		tca ON tca.project_id =
		p.id
		LEFT JOIN ( SELECT project_id, other_cost,
		software_cost FROM
		project_complete WHERE `status` = 3 ) t3 ON
		t3.project_id = p.id
		WHERE
		1 = 1
		<if test="projectId != null">
			AND p.id = #{projectId}
		</if>
		GROUP BY
		p.id
	</select>

</mapper>